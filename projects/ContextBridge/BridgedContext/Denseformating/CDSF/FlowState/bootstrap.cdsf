import React, { useState, useEffect } from 'react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Brain, Settings, Lock, Code, FileText, Monitor, MessageSquare, Database, Book, Network, CheckCircle, Circle, GitBranch } from 'lucide-react';

const ClaudeDashboard = () => {
  const [activeTab, setActiveTab] = useState('status');
  const [systemLoad, setSystemLoad] = useState(0);
  const [initialized, setInitialized] = useState(false);

  const projects = [
    {
      id: 'gates_foundation',
      name: 'Gates Foundation Proposal',
      completion: 93,
      metrics: {
        efficiency: 90,
        documentation: 85,
        optimization: 88
      },
      status: 'active',
      resources: ['Technical Specs', 'Documentation', 'Portal Setup']
    },
    {
      id: 'tech_docs',
      name: 'Technical Documentation',
      completion: 75,
      metrics: {
        efficiency: 82,
        documentation: 95,
        optimization: 78
      },
      status: 'in_progress',
      resources: ['API Docs', 'User Guides', 'System Architecture']
    },
    {
      id: 'framework',
      name: 'Framework Implementation',
      completion: 88,
      metrics: {
        efficiency: 91,
        documentation: 84,
        optimization: 86
      },
      status: 'active',
      resources: ['Core Modules', 'Testing Suite', 'Integration Layer']
    }
  ];

  const systemSettings = {
    interaction: {
      verboseResponses: false,
      stepByStepReasoning: true,
      codeExamples: true,
      mathNotation: false,
      languageStyle: 'technical'
    },
    development: {
      debugMode: false,
      showExamples: true,
      includeComments: true
    },
    formatting: {
      useMarkdown: true,
      syntaxHighlighting: true,
      formatTables: true
    }
  };

  useEffect(() => {
    const init = async () => {
      for (let i = 0; i <= 100; i += 20) {
        setSystemLoad(i);
        await new Promise(r => setTimeout(r, 500));
      }
      setInitialized(true);
    };
    init();
  }, []);

  const TabButton = ({ id, label, icon: Icon }) => (
    <button
      className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${
        activeTab === id 
          ? 'bg-blue-100 text-blue-700' 
          : 'hover:bg-gray-100'
      }`}
      onClick={() => setActiveTab(id)}
    >
      <Icon className="w-4 h-4" />
      <span>{label}</span>
    </button>
  );

  const ProjectCard = ({ project }) => (
    <div className="border rounded-lg p-4 space-y-3">
      <div className="flex justify-between items-center">
        <h4 className="font-medium">{project.name}</h4>
        <span className={`px-2 py-1 rounded-full text-xs ${
          project.status === 'active' ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'
        }`}>
          {project.status === 'active' ? 'Active' : 'In Progress'}
        </span>
      </div>
      
      <div className="space-y-2">
        <div className="relative pt-1">
          <div className="flex mb-2 items-center justify-between">
            <div className="text-xs font-semibold text-blue-700">
              Completion: {project.completion}%
            </div>
          </div>
          <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-100">
            <div 
              className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
              style={{ width: `${project.completion}%` }}
            />
          </div>
        </div>
        
        <div className="grid grid-cols-3 gap-2 text-sm">
          <div>
            <div className="text-gray-500">Efficiency</div>
            <div className="font-medium">{project.metrics.efficiency}%</div>
          </div>
          <div>
            <div className="text-gray-500">Documentation</div>
            <div className="font-medium">{project.metrics.documentation}%</div>
          </div>
          <div>
            <div className="text-gray-500">Optimization</div>
            <div className="font-medium">{project.metrics.optimization}%</div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'status':
        return (
          <div className="space-y-4">
            <h3 className="font-medium">System Status</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-2">Active Settings</h4>
                <div className="space-y-1 text-sm">
                  <div>Language: {systemSettings.interaction.languageStyle}</div>
                  <div>Step-by-Step: {systemSettings.interaction.stepByStepReasoning ? 'Enabled' : 'Disabled'}</div>
                  <div>Code Examples: {systemSettings.interaction.codeExamples ? 'Enabled' : 'Disabled'}</div>
                </div>
              </div>
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-2">System Load</h4>
                <div className="relative pt-1">
                  <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
                    <div 
                      className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
                      style={{ width: `${systemLoad}%` }}
                    />
                  </div>
                  <div className="text-sm">{systemLoad}% Utilized</div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'projects':
        return (
          <div className="space-y-4">
            <h3 className="font-medium">OpenInnovate Projects</h3>
            <div className="grid grid-cols-1 gap-4">
              {projects.map(project => (
                <ProjectCard key={project.id} project={project} />
              ))}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="w-full max-w-4xl p-6 space-y-6 bg-white rounded-lg">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Brain className="w-6 h-6" />
          <h2 className="text-xl font-bold">System Dashboard</h2>
        </div>
      </div>

      {!initialized ? (
        <Alert>
          <AlertDescription>
            Loading system status...
          </AlertDescription>
        </Alert>
      ) : (
        <div className="space-y-6">
          <div className="flex space-x-2 overflow-x-auto pb-2">
            <TabButton id="status" label="System Status" icon={Monitor} />
            <TabButton id="projects" label="Projects" icon={GitBranch} />
          </div>

          <div className="border rounded-lg p-4">
            {renderContent()}
          </div>
          
          <div className="text-sm text-gray-500 p-4 bg-gray-50 rounded-lg">
            Note: This is a display-only dashboard. To change settings or load projects, 
            please use the text menu in the Claude prompt.
          </div>
        </div>
      )}
    </div>
  );
};

export default ClaudeDashboard;
