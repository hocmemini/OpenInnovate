// manifest.json
{
  "manifest_version": 3,
  "name": "Chat to GitHub Sync",
  "version": "1.0",
  "description": "Syncs chat conversations to GitHub repository",
  "permissions": [
    "activeTab",
    "storage",
    "scripting"
  ],
  "host_permissions": [
    "https://claude.ai/*"
  ],
  "action": {
    "default_popup": "popup.html"
  },
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [{
    "matches": ["https://claude.ai/*"],
    "js": ["content.js"]
  }]
}

// popup.html
<!DOCTYPE html>
<html>
<head>
  <title>Chat to GitHub Sync</title>
  <style>
    body { width: 300px; padding: 10px; }
    input, button { margin: 5px 0; width: 100%; }
  </style>
</head>
<body>
  <h3>GitHub Configuration</h3>
  <input type="text" id="githubToken" placeholder="GitHub Personal Access Token">
  <input type="text" id="repoOwner" placeholder="Repository Owner">
  <input type="text" id="repoName" placeholder="Repository Name">
  <input type="text" id="branchName" placeholder="Branch Name (default: main)">
  <button id="saveConfig">Save Configuration</button>
  <button id="syncNow">Sync Current Conversation</button>
  <div id="status"></div>
  <script src="popup.js"></script>
</body>
</html>

// popup.js
document.addEventListener('DOMContentLoaded', () => {
  // Load saved configuration
  chrome.storage.sync.get([
    'githubToken',
    'repoOwner',
    'repoName',
    'branchName'
  ], (config) => {
    document.getElementById('githubToken').value = config.githubToken || '';
    document.getElementById('repoOwner').value = config.repoOwner || '';
    document.getElementById('repoName').value = config.repoName || '';
    document.getElementById('branchName').value = config.branchName || 'main';
  });

  // Save configuration
  document.getElementById('saveConfig').addEventListener('click', () => {
    const config = {
      githubToken: document.getElementById('githubToken').value,
      repoOwner: document.getElementById('repoOwner').value,
      repoName: document.getElementById('repoName').value,
      branchName: document.getElementById('branchName').value || 'main'
    };

    chrome.storage.sync.set(config, () => {
      document.getElementById('status').textContent = 'Configuration saved!';
      setTimeout(() => {
        document.getElementById('status').textContent = '';
      }, 2000);
    });
  });

  // Trigger sync
  document.getElementById('syncNow').addEventListener('click', () => {
    chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {
      chrome.tabs.sendMessage(tabs[0].id, {action: 'syncConversation'});
    });
  });
});

// content.js
function extractConversation() {
  const messages = document.querySelectorAll('.message-content');
  let conversation = '';
  
  messages.forEach((message, index) => {
    const role = message.closest('.message').classList.contains('user-message') 
      ? 'Human' 
      : 'Assistant';
    conversation += `${role}: ${message.textContent}\n\n`;
  });
  
  return conversation;
}

async function syncToGitHub(conversation) {
  const config = await new Promise(resolve => {
    chrome.storage.sync.get([
      'githubToken',
      'repoOwner',
      'repoName',
      'branchName'
    ], resolve);
  });

  if (!config.githubToken || !config.repoOwner || !config.repoName) {
    console.error('GitHub configuration missing');
    return;
  }

  const filename = `conversations/${new Date().toISOString()}.md`;
  const content = btoa(conversation); // Base64 encode content

  try {
    // Create or update file in GitHub repository
    const response = await fetch(`https://api.github.com/repos/${config.repoOwner}/${config.repoName}/contents/${filename}`, {
      method: 'PUT',
      headers: {
        'Authorization': `token ${config.githubToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: 'Update conversation from Chrome extension',
        content: content,
        branch: config.branchName
      })
    });

    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.statusText}`);
    }

    console.log('Conversation successfully synced to GitHub');
  } catch (error) {
    console.error('Error syncing to GitHub:', error);
  }
}

// Listen for sync request from popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'syncConversation') {
    const conversation = extractConversation();
    syncToGitHub(conversation);
  }
});

// background.js
chrome.runtime.onInstalled.addListener(() => {
  console.log('Extension installed');
});
